#include <string>
#include <map>
#include "Resources.h"

using namespace std;


const Resource Resources::VERTEX_SHADERS[] = {
	SHADERS_CHAPTER5_VS,
	SHADERS_COLORCUBE_VS,
	SHADERS_COLORED_VS,
	SHADERS_CUBEMAP_VS,
	SHADERS_DISTORTION_VS,
	SHADERS_INDEXED_VS,
	SHADERS_LIT_VS,
	SHADERS_LITCOLORED_VS,
	SHADERS_LITCOLOREDINSTANCED_VS,
	SHADERS_LITMATERIALS_VS,
	SHADERS_LITTEXTURED_VS,
	SHADERS_RASTERIZER_VS,
	SHADERS_SIMPLE_VS,
	SHADERS_TEXT_VS,
	SHADERS_TEXTURED_VS,
  NO_RESOURCE
};

const Resource Resources::FRAGMENT_SHADERS[] = {
	SHADERS_CHAPTER5_FS,
	SHADERS_COLORCUBE_FS,
	SHADERS_COLORED_FS,
	SHADERS_CUBEMAP_FS,
	SHADERS_CUBEMAP360_FS,
	SHADERS_DISTORTION_FS,
	SHADERS_LITCOLORED_FS,
	SHADERS_LITTEXTURED_FS,
	SHADERS_RASTERIZER_FS,
	SHADERS_RIFTCHROMAWARP_FS,
	SHADERS_RIFTCHROMAWARPMULTISAMPLE_FS,
	SHADERS_RIFTWARP_FS,
	SHADERS_RIFTWARPDIRECT_FS,
	SHADERS_RIFTWARPMULTISAMPLE_FS,
	SHADERS_TEXT_FS,
	SHADERS_TEXTURED_FS,
  NO_RESOURCE
};

const Resource Resources::LIB_SHADERS[] = {
	SHADERS_NOISE_CELLULAR2_GLSL,
	SHADERS_NOISE_CELLULAR2X2_GLSL,
	SHADERS_NOISE_CELLULAR2X2X2_GLSL,
	SHADERS_NOISE_CELLULAR3_GLSL,
	SHADERS_NOISE_CNOISE2_GLSL,
	SHADERS_NOISE_CNOISE3_GLSL,
	SHADERS_NOISE_CNOISE4_GLSL,
	SHADERS_NOISE_SNOISE2_GLSL,
	SHADERS_NOISE_SNOISE3_GLSL,
	SHADERS_NOISE_SNOISE4_GLSL,
	SHADERS_NOISE_SRDNOISE2_GLSL,
  NO_RESOURCE
};

const Resources::Pair Resources::RESOURCE_MAP_VALUES[] = { 
  std::make_pair(FONTS_BUBBLEGUM_SANS_REGULAR_SDFF, "fonts/Bubblegum Sans Regular.sdff"), 
  std::make_pair(FONTS_INCONSOLATA_MEDIUM_SDFF, "fonts/Inconsolata Medium.sdff"), 
  std::make_pair(FONTS_INCONSOLATA_BOLD_TTF, "fonts/Inconsolata-Bold.ttf"), 
  std::make_pair(FONTS_INCONSOLATA_REGULAR_TTF, "fonts/Inconsolata-Regular.ttf"), 
  std::make_pair(FONTS_WALTER_TURNCOAT_REGULAR_SDFF, "fonts/Walter Turncoat Regular.sdff"), 
  std::make_pair(IMAGES_PANO_20140620_160351_JPG, "images/PANO_20140620_160351.jpg"), 
  std::make_pair(IMAGES_R0010063_JPG, "images/R0010063.jpg"), 
  std::make_pair(IMAGES_TUSCANY_UNDISTORTED_LEFT_DK1_PNG, "images/Tuscany_Undistorted_Left_DK1.png"), 
  std::make_pair(IMAGES_TUSCANY_UNDISTORTED_LEFT_DK2_PNG, "images/Tuscany_Undistorted_Left_DK2.png"), 
  std::make_pair(IMAGES_TUSCANY_UNDISTORTED_RIGHT_DK1_PNG, "images/Tuscany_Undistorted_Right_DK1.png"), 
  std::make_pair(IMAGES_TUSCANY_UNDISTORTED_RIGHT_DK2_PNG, "images/Tuscany_Undistorted_Right_DK2.png"), 
  std::make_pair(IMAGES_CURSOR_PNG, "images/cursor.png"), 
  std::make_pair(IMAGES_FLOOR_PNG, "images/floor.png"), 
  std::make_pair(IMAGES_SHOULDER_CAT_PNG, "images/shoulder_cat.png"), 
  std::make_pair(IMAGES_SKY_CITY_XNEG_PNG, "images/sky/city/xneg.png"), 
  std::make_pair(IMAGES_SKY_CITY_XPOS_PNG, "images/sky/city/xpos.png"), 
  std::make_pair(IMAGES_SKY_CITY_YNEG_PNG, "images/sky/city/yneg.png"), 
  std::make_pair(IMAGES_SKY_CITY_YPOS_PNG, "images/sky/city/ypos.png"), 
  std::make_pair(IMAGES_SKY_CITY_ZNEG_PNG, "images/sky/city/zneg.png"), 
  std::make_pair(IMAGES_SKY_CITY_ZPOS_PNG, "images/sky/city/zpos.png"), 
  std::make_pair(IMAGES_SPACE_NEEDLE_PNG, "images/space_needle.png"), 
  std::make_pair(IMAGES_STEREO_VLCSNAP_2013_11_16_12H41M46S160_PNG, "images/stereo/vlcsnap-2013-11-16-12h41m46s160.png"), 
  std::make_pair(IMAGES_STEREO_VLCSNAP_2013_11_16_19H47M52S211_PNG, "images/stereo/vlcsnap-2013-11-16-19h47m52s211.png"), 
  std::make_pair(IMAGES_STEREO_VLCSNAP_2013_11_16_20H08M17S111_PNG, "images/stereo/vlcsnap-2013-11-16-20h08m17s111.png"), 
  std::make_pair(IMAGES_STEREO_VLCSNAP_2013_11_16_20H09M17S243_PNG, "images/stereo/vlcsnap-2013-11-16-20h09m17s243.png"), 
  std::make_pair(IMAGES_STEREO_VLCSNAP_2013_11_16_20H09M43S38_PNG, "images/stereo/vlcsnap-2013-11-16-20h09m43s38.png"), 
  std::make_pair(IMAGES_VALVE_HMD_CUBE_TEXTURE_PNG, "images/valve_hmd_cube_texture.png"), 
  std::make_pair(MESHES_HYDRA_FROZEN_HIGH_CTM, "meshes/Hydra_Frozen_High.ctm"), 
  std::make_pair(MESHES_ARTIFICIAL_HORIZON_MTL, "meshes/artificial_horizon.mtl"), 
  std::make_pair(MESHES_ARTIFICIAL_HORIZON_OBJ, "meshes/artificial_horizon.obj"), 
  std::make_pair(MESHES_BUN_ZIPPER_CTM, "meshes/bun_zipper.ctm"), 
  std::make_pair(MESHES_BUNNY2_CTM, "meshes/bunny2.ctm"), 
  std::make_pair(MESHES_CONE_CTM, "meshes/cone.ctm"), 
  std::make_pair(MESHES_CYLINDER_CTM, "meshes/cylinder.ctm"), 
  std::make_pair(MESHES_FRUSTUM_CTM, "meshes/frustum.ctm"), 
  std::make_pair(MESHES_HEAD_CTM, "meshes/head.ctm"), 
  std::make_pair(MESHES_HEMI_CTM, "meshes/hemi.ctm"), 
  std::make_pair(MESHES_ICO_SPHERE_CTM, "meshes/ico-sphere.ctm"), 
  std::make_pair(MESHES_ICO_CTM, "meshes/ico.ctm"), 
  std::make_pair(MESHES_MANIKIN_CTM, "meshes/manikin.ctm"), 
  std::make_pair(MESHES_RIFT_CTM, "meshes/rift.ctm"), 
  std::make_pair(MESHES_SPHERE_CTM, "meshes/sphere.ctm"), 
  std::make_pair(MESHES_TORUS_CTM, "meshes/torus.ctm"), 
  std::make_pair(MISC_CURSOR_XPM, "misc/Cursor.xpm"), 
  std::make_pair(MISC_PANO_20140620_160351_EXIV, "misc/PANO_20140620_160351.exiv"), 
  std::make_pair(MISC_GLSL_XML, "misc/glsl.xml"), 
  std::make_pair(SHADERS_CHAPTER5_FS, "shaders/Chapter5.fs"), 
  std::make_pair(SHADERS_CHAPTER5_VS, "shaders/Chapter5.vs"), 
  std::make_pair(SHADERS_COLORCUBE_FS, "shaders/ColorCube.fs"), 
  std::make_pair(SHADERS_COLORCUBE_VS, "shaders/ColorCube.vs"), 
  std::make_pair(SHADERS_COLORED_FS, "shaders/Colored.fs"), 
  std::make_pair(SHADERS_COLORED_VS, "shaders/Colored.vs"), 
  std::make_pair(SHADERS_CUBEMAP_FS, "shaders/CubeMap.fs"), 
  std::make_pair(SHADERS_CUBEMAP_VS, "shaders/CubeMap.vs"), 
  std::make_pair(SHADERS_CUBEMAP360_FS, "shaders/CubeMap360.fs"), 
  std::make_pair(SHADERS_DISTORTION_FS, "shaders/Distortion.fs"), 
  std::make_pair(SHADERS_DISTORTION_VS, "shaders/Distortion.vs"), 
  std::make_pair(SHADERS_INDEXED_VS, "shaders/Indexed.vs"), 
  std::make_pair(SHADERS_LIT_VS, "shaders/Lit.vs"), 
  std::make_pair(SHADERS_LITCOLORED_FS, "shaders/LitColored.fs"), 
  std::make_pair(SHADERS_LITCOLORED_VS, "shaders/LitColored.vs"), 
  std::make_pair(SHADERS_LITCOLOREDINSTANCED_VS, "shaders/LitColoredInstanced.vs"), 
  std::make_pair(SHADERS_LITMATERIALS_VS, "shaders/LitMaterials.vs"), 
  std::make_pair(SHADERS_LITTEXTURED_FS, "shaders/LitTextured.fs"), 
  std::make_pair(SHADERS_LITTEXTURED_VS, "shaders/LitTextured.vs"), 
  std::make_pair(SHADERS_RASTERIZER_FS, "shaders/Rasterizer.fs"), 
  std::make_pair(SHADERS_RASTERIZER_VS, "shaders/Rasterizer.vs"), 
  std::make_pair(SHADERS_RIFTCHROMAWARP_FS, "shaders/RiftChromaWarp.fs"), 
  std::make_pair(SHADERS_RIFTCHROMAWARPMULTISAMPLE_FS, "shaders/RiftChromaWarpMultisample.fs"), 
  std::make_pair(SHADERS_RIFTWARP_FS, "shaders/RiftWarp.fs"), 
  std::make_pair(SHADERS_RIFTWARPDIRECT_FS, "shaders/RiftWarpDirect.fs"), 
  std::make_pair(SHADERS_RIFTWARPMULTISAMPLE_FS, "shaders/RiftWarpMultisample.fs"), 
  std::make_pair(SHADERS_SIMPLE_VS, "shaders/Simple.vs"), 
  std::make_pair(SHADERS_TEXT_FS, "shaders/Text.fs"), 
  std::make_pair(SHADERS_TEXT_VS, "shaders/Text.vs"), 
  std::make_pair(SHADERS_TEXTURED_FS, "shaders/Textured.fs"), 
  std::make_pair(SHADERS_TEXTURED_VS, "shaders/Textured.vs"), 
  std::make_pair(SHADERS_NOISE_LICENSE_TXT, "shaders/noise/LICENSE.txt"), 
  std::make_pair(SHADERS_NOISE_README_TXT, "shaders/noise/README.txt"), 
  std::make_pair(SHADERS_NOISE_CELLULAR2_GLSL, "shaders/noise/cellular2.glsl"), 
  std::make_pair(SHADERS_NOISE_CELLULAR2X2_GLSL, "shaders/noise/cellular2x2.glsl"), 
  std::make_pair(SHADERS_NOISE_CELLULAR2X2X2_GLSL, "shaders/noise/cellular2x2x2.glsl"), 
  std::make_pair(SHADERS_NOISE_CELLULAR3_GLSL, "shaders/noise/cellular3.glsl"), 
  std::make_pair(SHADERS_NOISE_CNOISE2_GLSL, "shaders/noise/cnoise2.glsl"), 
  std::make_pair(SHADERS_NOISE_CNOISE3_GLSL, "shaders/noise/cnoise3.glsl"), 
  std::make_pair(SHADERS_NOISE_CNOISE4_GLSL, "shaders/noise/cnoise4.glsl"), 
  std::make_pair(SHADERS_NOISE_SNOISE2_GLSL, "shaders/noise/snoise2.glsl"), 
  std::make_pair(SHADERS_NOISE_SNOISE3_GLSL, "shaders/noise/snoise3.glsl"), 
  std::make_pair(SHADERS_NOISE_SNOISE4_GLSL, "shaders/noise/snoise4.glsl"), 
  std::make_pair(SHADERS_NOISE_SRDNOISE2_GLSL, "shaders/noise/srdnoise2.glsl"), 
  std::make_pair(NO_RESOURCE, "")
};

const string Resources::RESOURCE_ROOT = "/home/stefan/Repositories/oculus_rift_in_action_res";
